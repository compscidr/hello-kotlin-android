plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'org.jetbrains.kotlin.plugin.serialization'
    id 'io.github.reactivecircus.app-versioning' version '1.3.2'
    id 'de.mannodermaus.android-junit5'
    id 'org.jmailen.kotlinter'
    id 'jacoco'
    id "com.google.android.libraries.mapsplatform.secrets-gradle-plugin" version "2.0.1"
    id 'org.jetbrains.dokka'
}

android {
    namespace "com.example.myapplication"
    compileSdk 34

    defaultConfig {
        testInstrumentationRunnerArguments runnerBuilder: 'de.mannodermaus.junit5.AndroidJUnit5Builder'
        applicationId "com.example.myapplication"
        minSdkVersion 19
        targetSdkVersion 34
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
        // 1) Make sure to use the AndroidJUnitRunner, of a subclass of it. This requires a dependency on androidx.test:runner, too!
        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
        // 2) Connect JUnit 5 to the runner
    }

    // 3) Java 8 is required
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    packagingOptions {
        jniLibs {
            excludes += ['META-INF/LICENSE*']
        }
        resources {
            excludes += ['META-INF/LICENSE*']
        }
    }

    // 4) JUnit 5 will bundle in files with identical paths; exclude them

    buildTypes {
        release {
            shrinkResources true
            minifyEnabled true
        }
        debug {
            shrinkResources false
            minifyEnabled false
            testCoverageEnabled true
            enableUnitTestCoverage true
        }
    }

    testOptions {
        unitTests.all {
            useJUnitPlatform()
            jacoco {
                includeNoLocationClasses = true
                excludes = [
                        'jdk.internal.*',
                ]
            }
        }
        // should let the tests run with with gradle via -DincludeTags="tag1,tag2" -DexcludeTags="tag3,tag4"
        // https://github.com/mannodermaus/android-junit5/wiki/Configuration
        // https://junit.org/junit5/docs/current/user-guide/#writing-tests-tagging-and-filtering
        // https://www.vogella.com/tutorials/AndroidTesting/article.html
        junitPlatform {
            filters {
                //includeTags 'TEST1'
                //excludeTags 'TEST2'
            }
        }
        // should let the tests run with with gradle via -DincludeTags="tag1,tag2" -DexcludeTags="tag3,tag4"
        // https://github.com/mannodermaus/android-junit5/wiki/Configuration
        // https://junit.org/junit5/docs/current/user-guide/#writing-tests-tagging-and-filtering
        // https://www.vogella.com/tutorials/AndroidTesting/article.html
        junitPlatform {
            String includedTagsProperty = System.getProperty("includeTags")
            boolean includedTagsPropertySet = includedTagsProperty != null

            String excludedTagsProperty = System.getProperty("excludeTags")
            boolean excludedTagsPropertySet = excludedTagsProperty != null

            if (includedTagsPropertySet && excludedTagsPropertySet) {
                filters("debug") {
                    includeTags includedTagsProperty
                    excludeTags excludedTagsProperty
                }
            } else if (includedTagsPropertySet && !excludedTagsPropertySet) {
                filters("debug") {
                    includeTags includedTagsProperty
                }
            } else if (!includedTagsPropertySet && excludedTagsPropertySet) {
                filters("debug") {
                    excludeTags excludedTagsProperty
                }
            }
        }
    }
    buildFeatures {
        buildConfig true
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "androidx.appcompat:appcompat:1.6.1"
    implementation "androidx.core:core-ktx:1.13.1"
    implementation "androidx.constraintlayout:constraintlayout:2.1.4"
    implementation "androidx.test:core-ktx:1.5.0"
    implementation "com.google.dagger:hilt-android:${hilt_version}"
    implementation project(path: ':lib')
    kapt "com.google.dagger:hilt-compiler:${hilt_version}"

    // logging
    implementation "org.slf4j:slf4j-api:${slf4j_version}"
    implementation "com.github.tony19:logback-android:3.0.0"
    implementation ("com.papertrailapp:logback-syslog4j:1.0.0") {
        exclude group: "ch.qos.logback"
    }

    // (Required) Writing and executing Unit Tests on the JUnit Platform
    testImplementation "org.junit.jupiter:junit-jupiter-api:$jupiter_version"
    testImplementation "io.mockk:mockk:${mockk_version}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$jupiter_version"

    // (Optional) If you need "Parameterized Tests"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$jupiter_version"

    // 5) Test Runner, if you don't have it already
    androidTestImplementation "androidx.test:runner:1.5.2"
    androidTestImplementation "org.junit.jupiter:junit-jupiter-api:$jupiter_version"

    // 6) The instrumentation test companion libraries
    androidTestImplementation "de.mannodermaus.junit5:android-test-core:1.4.0"
    androidTestImplementation "io.mockk:mockk:${mockk_version}"
    androidTestRuntimeOnly "de.mannodermaus.junit5:android-test-runner:1.4.0"
}

configurations.testImplementation {
    exclude module: 'logback-android'
}

jacoco {
    toolVersion = '0.8.12'
}

kotlin {
    jvmToolchain(17)
}

// https://github.com/ReactiveCircus/app-versioning
import io.github.reactivecircus.appversioning.SemVer

appVersioning {
    fetchTagsWhenNoneExistsLocally.set(true)
    overrideVersionCode { gitTag, providers, variantInfo ->
        def semVer = SemVer.fromGitTag(gitTag)
        semVer.major * 2000000 + semVer.minor * 20000 + semVer.patch * 200 + gitTag.commitsSinceLatestTag
    }
}

// for some rason running the jacocoTestReport generates a report for the release unit tests that
// works with jacoco, however it doesn't add it to the
tasks.create(name: "jacocoTestReportUnitTests", type: JacocoReport, dependsOn: "jacocoTestReport") {
    group = "Reporting" // existing group containing tasks for generating linting reports etc.
    description = "Generate JVM unit test coverage reports using Jacoco."

    reports {
        // human readable (written into './build/reports/jacoco/unitTestCoverageReport/html')
        html.required = true
        // CI-readable (written into './build/reports/jacoco/unitTestCoverageReport/unitTestCoverageReport.xml')
        xml.required = true
    }

    // Execution data generated when running the tests against classes instrumented by the JaCoCo agent.
    // This is enabled with 'enableUnitTestCoverage' in the 'debug' build type.
    executionData.from = fileTree(dir: "${project.buildDir}/jacoco/", includes: ["/testReleaseUnitTest.exec"])

    // Compiled Kotlin class files are written into build-variant-specific subdirectories of 'build/tmp/kotlin-classes'.
    classDirectories.from = "${project.buildDir}/tmp/kotlin-classes/release"

    // To produce an accurate report, the bytecode is mapped back to the original source code.
    sourceDirectories.from = "${project.projectDir}/src/main/java"
}

apply from: file('secrets.gradle')
apply from: file('publish.gradle')